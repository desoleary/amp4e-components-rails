//------------------------------------------------------------------------------
// AMP UI: Mixins (SCSS)
//------------------------------------------------------------------------------


// -----=====[ General ]=====-----


// ----- Selectors -----

// Target all text field types. Use like this:
// #{$textFields} { properties }
$textFields: 'input[type="text"], input[type="password"], input[type="email"], input[type="url"]';


// ----- FontAwesome -----

// Apply FontAwesome in places where we can't easily add the `icon` class
@mixin font-awesome {
  font-family: FontAwesome;
  font-size: 14px;
  transform: translate(0, 0);
  text-rendering: auto;
  @include textAA;
}

// ----- Layout: box-sizing -----

@mixin boxSizing ($type) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  box-sizing: $type;
}

// an element's padding does not affect its width and height (Sane Mode)
@mixin borderBox { @include boxSizing(border-box) }

// an element's padding is *added* to its width and height
@mixin contentBox { @include boxSizing(content-box) }


// ----- Margins -----

// remove the extra margins at the top and bottom of a box
@mixin trimMargins {
  > :first-child { margin-top: 0 }
  > :last-child { margin-bottom: 0 }
}


// ----- No Results -----

@mixin empty-container {
  padding: 39px 20px;
  border: 1px dashed gray(74);
  background-color: gray(99);
  text-align: center;
  text-shadow: 0 1px 0 white;
  font-weight: 300;
  font-size: 14px;
  line-height: 20px;
  @include boxShadow(inset 0 0 3px black(0.1));
  @include roundedCorners(6px);
}


// ----- Computer Icon -----

%computerIcon {
  display: inline-block;
  margin-right: 2px;
  width: 13px;
  text-align: center;
  font-size: 14px;
}


// -----=====[ Responsive Layouts ]=====-----


// See the Responsive Layouts wiki for details on how to use these:
// https://code.engine.sourcefire.com/Cloud/janus-rails/wiki/Responsive-Layouts

// all responsive layouts (any screen size)
@mixin responsive {
  .responsive-layout & {
    @content
  }
}

// < 768px
@mixin responsive-xs-only {
  @media (max-width: $screen-xs-max) {
    @include responsive {
      @content
    }
  }
}

// >= 768px
@mixin responsive-sm {
  @media (min-width: $screen-sm-min) {
    @include responsive {
      @content
    }
  }
}

// >= 768px *and* < 992px
@mixin responsive-sm-only {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    @include responsive {
      @content
    }
  }
}

// < 992px
@mixin responsive-sm-max {
  @media (max-width: $screen-sm-max) {
    @include responsive {
      @content
    }
  }
}

// >= 992px
@mixin responsive-md {
  @media (min-width: $screen-md-min) {
    @include responsive {
      @content
    }
  }
}

// >= 992px *and* < 1200px
@mixin responsive-md-only {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    @include responsive {
      @content
    }
  }
}

// < 1200px
@mixin responsive-md-max {
  @media (max-width: $screen-md-max) {
    @include responsive {
      @content
    }
  }
}

// >= 1200px
@mixin responsive-lg {
  @media (min-width: $screen-lg-min) {
    @include responsive {
      @content
    }
  }
}

// Custom breakpoints

@mixin responsive-max ($screen-max) {
  @media (max-width: $screen-max) {
    @include responsive {
      @content
    }
  }
}

@mixin responsive-min ($screen-min) {
  @media (min-width: $screen-min) {
    @include responsive {
      @content
    }
  }
}

@mixin responsive-range ($screen-min, $screen-max) {
  @media (min-width: $screen-min) and (max-width: $screen-max) {
    @include responsive {
      @content
    }
  }
}



// -----=====[ UI Behavior ]=====-----


// ----- Prevent dragging (images) -----
@mixin noDrag {
  -webkit-user-drag: none;
  -moz-user-drag: -moz-none;
  user-drag: none;
}

// ----- Remove focus outlines -----
@mixin noOutline {
  outline-width: 0 !important;
  outline: none !important;
}

// ----- Prevent text selection -----
@mixin noSelect {
  -webkit-user-select: none;
  -moz-user-select: -moz-none;
  -ms-user-select: none;
  user-select: none;
}

// ----- Allow text selection -----
@mixin textSelect {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  cursor: text;
}


// -----=====[ Animation ]=====-----


// ----- Animation Properties -----

@mixin animation ($properties) {
  -webkit-animation: $properties;
  -moz-animation: $properties;
  animation: $properties;
}

@mixin animation-duration ($duration) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  animation-duration: $duration;
}

@mixin animation-iteration-count ($iterations) {
  -webkit-animation-iteration-count: $iterations;
  -moz-animation-iteration-count: $iterations;
  animation-iteration-count: $iterations;
}

@mixin animation-name ($name) {
  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  animation-name: $name;
}

@mixin animation-timing-function ($function) {
  -webkit-animation-timing-function: $function;
  -moz-animation-timing-function: $function;
  animation-timing-function: $function;
}


// ----- Animation Presets -----

@mixin animate-predelay ($delay) {
  @include animation-duration($delay);
  @include animation-iteration-count(1);
  @include animation-name(predelay);
  @include animation-timing-function(steps(1));
}


// ----- Transform -----

@mixin transform ($properties) {
  -webkit-transform: $properties;
  -moz-transform: $properties;
  transform: $properties;
}


// ----- Transition -----

// Vendor-prefixed `transition` with individual properties also vendor-prefixed
// - Takes a comma-separated list of properties to be transitioned
// - Each property looks like this: [property] [time] [timing-function]
// - Property name must come first (time and timing-function are optional)
// - Requires SASS 3.3+
@mixin transition ($properties...) {
  $prefixes: webkit moz standard;

  $prefix: (
          webkit: '-webkit-',
          moz:  '-moz-',
          standard: ''
  );

  $props: (
          webkit: (),
          moz: (),
          standard: ()
  );

  $prefixed: (
          border-bottom-left-radius
          border-bottom-right-radius
          border-radius
          border-top-left-radius
          border-top-right-radius
          box-shadow
          box-sizing
          linear-gradient
          transform
  );

  @each $p in $properties {
    @each $pf in $prefixes {
      $property: nth($p, 1);
      // add vendor prefix if needed for current property
      @if index($prefixed, $property) {
        $property: unquote("#{map-get($prefix, $pf)}#{$property}");
      }
      // append the remaining values (time, timing function)
      @if length($p) > 1 {
        @for $i from 2 through length($p) {
          $property: $property #{nth($p, $i)}
        }
      }
      // add the property to the $props array for the current prefix
      $props: map-merge($props, ($pf: append(map-get($props, $pf), $property)));
    }
  }

  @each $k, $v in $props {
    #{map-get($prefix, $k)}transition: join((), $v, comma);
  }
}


// -----=====[ Visual Effects ]=====-----


// ----- Backface Visibility -----

@mixin backfaceVisibility ($value) {
  -webkit-backface-visibility: $value;
  backface-visibility: $value;
}


// ----- Black & White -----

// Black & White with opacity

@function black ($opacity) {
  @return rgba(0,0,0,$opacity);
}

@function white ($opacity) {
  @return rgba(255,255,255,$opacity);
}

@function gray ($lightness) {
  @return lighten(black, $lightness);
}

// ----- Gradients -----

// horizontal gradient (left to right)
@mixin hGradient ($gradientColor1, $gradientColor2) {
  background-image: -moz-linear-gradient(0, $gradientColor1 0%, $gradientColor2 100%);
  background-image: -webkit-linear-gradient(0, $gradientColor1 0%, $gradientColor2 100%);
  background-image: linear-gradient(-90deg, $gradientColor1 0%, $gradientColor2 100%);
}

// vertical gradient (top to bottom)
@mixin vGradient ($gradientColor1, $gradientColor2) {
  background-image: -moz-linear-gradient(-90deg, $gradientColor1 0%, $gradientColor2 100%);
  background-image: -webkit-linear-gradient(-90deg, $gradientColor1 0%, $gradientColor2 100%);
  background-image: linear-gradient(-180deg, $gradientColor1 0%, $gradientColor2 100%);
}

@mixin gradient ($angle, $gradientStops...) {
  background-image: -moz-linear-gradient($angle + 90deg, $gradientStops);
  background-image: -webkit-linear-gradient($angle + 90deg, $gradientStops);
  background-image: linear-gradient($angle, $gradientStops);
}

// Faux-gradient border
@mixin gradientBorder ($color) {
  border-top: 1px solid $color;
  border-right: 1px solid darken($color, 5%);
  border-bottom: 1px solid darken($color, 10%);
  border-left: 1px solid darken($color, 5%);
}


// ----- Rounded Corners -----

@mixin roundedCorners ($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

// Edge-specific
//
// It's possible to combine these with the opposite edge,
// so you can have different values for top & bottom or left & right

@mixin roundedTop ($radius) {
  -webkit-border-top-left-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin roundedBottom ($radius) {
  -webkit-border-bottom-left-radius: $radius;
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin roundedLeft ($radius) {
  -webkit-border-top-left-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin roundedRight ($radius) {
  -webkit-border-top-right-radius: $radius;
  -webkit-border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

// Corner-specific

@mixin roundedTopLeft ($radius) {
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin roundedTopRight ($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin roundedBottomLeft ($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin roundedBottomRight ($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
}


// ----- Shadows & Highlights -----

@mixin boxShadow ($shadow...) {
  -webkit-box-shadow: $shadow;
  box-shadow: $shadow;
}

@mixin boxHighlight ($borderColor: $box-highlight-border, $shadowColor: $box-highlight-shadow, $width: 3px, $spread: 0) {
  border: 1px solid $borderColor;
  @include boxShadow(0 0 $width $spread $shadowColor);
}


// -----=====[ Text ]=====-----


// ----- Antialiased -----

// Regular antialiasing instead of subpixel smoothing.
// This reduces character weight, which can improve legibility.
@mixin textAA {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


// ----- Placeholder Text -----

// Styles for placeholder text in text fields
@mixin placeholderText {
  &::-webkit-input-placeholder { @content }
  &:-moz-placeholder { opacity: 1; @content }
  &::-moz-placeholder { opacity: 1; @content }
  &:-ms-input-placeholder { @content }
}


// ----- Shadow Outline -----

@mixin textShadowOutline ($h: $hue, $s: 100%) {
  text-shadow: 0 0 1px hsl($h, $s, 20%), 0 0 2px hsl($h, $s, 30%), 0 0 3px hsl($h, $s, 40%)
}


// ----- Text Selection Color -----

@mixin textSelectionColor ($color) {
  ::-moz-selection { background-color: $color }
  ::-moz-selection:-moz-window-inactive { background-color: desaturate($color, 100%) }
  ::selection { background-color: $color }
  ::selection:window-inactive { background-color: desaturate($color, 100%) }
}


// ----- Truncation -----

@mixin textTruncate {
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin textTruncateOneLine {
  white-space: nowrap;
  @include textTruncate;
}


// -----=====[ Retina ]=====-----

@mixin retina {
  @media
  screen and (-webkit-min-device-pixel-ratio: 1.5),
  screen and (min-resolution: 1.5dppx) {
    @content
  }
}

// Here's an example usage of the retina mixin for a sprite.
//
// @mixin spriteMain () {
//   background-image: $spriteMain;
//   background-size: $spriteMainWidth $spriteMainHeight;
//   @include retina { background-image: url($spriteMain2x) }
// }
//
// The idea is, you have two versions of each sprite -- normal, and retina (2x).
// The retina sprite has all of the same images, in the same positions, but with
// the size and position values all doubled. Suppose you have a circled-I (i)
// icon for "info". Here are the values for each version (all in px):
//
//          width height  x   y
// normal   16    16      20  50
// retina   32    32      40  100
//
// In the normal sprite, the icon is 16x16 and positioned at 20,50.
// In the retina sprite, the icon is 32x32 and positioned at 40,100.
//
// You then define $spriteMain and $spriteMain2x (path to the normal and retina
// sprites), and set $spriteMainWidth and $spriteMainHeight to the total width
// and height of the regular sprite. Whenever you want to use the sprite, just
// add `@include spriteMain;` to a block of rules, and set `background-position` to the
// appropriate values for the regular sprite. For the above example, this would
// look something like:
//
// .infoIcon {
//   background-position: -20px -50px;
//   @include spriteMain;
// }
